% Read image
I = imread('D:\MATLAB R2023b\HELLO.jpg');
figure;
imshow(I);
title('original image');

% Convert to grayscale image
Igray = rgb2gray(I); 
figure;
imshow(Igray);
title('gray-scale image');

% binarized image
BW = imbinarize(Igray); 
BW = ~BW; 
figure;
imshow(BW);
title('binarized image');

% Cleaning up small areas and noise
BW_clean = bwareaopen(BW, 50);% Remove noise less than 50 pixels
figure;
imshow(BW_clean);
title('Binary image after denoising');

% Detect character boundaries and perform character segmentation
[L, num] = bwlabel(BW_clean); % Connectivity domain labeling for binary images
figure;
imshow(label2rgb(L));% Displays each connectivity field in a different color
title('Character segmentation results');

% Extract each character and mark it
for k = 1:num
     % Get the bounding box for each character
    [r, c] = find(L == k); % Get the pixel point of the current character
    boundingBox = [min(c), min(r), max(c)-min(c)+1, max(r)-min(r)+1];% Determining the bounding box

     % Draw rectangular boxes on the original image
    figure;
    imshow(I);
    hold on;
    rectangle('Position', boundingBox, 'EdgeColor', 'r', 'LineWidth', 2);
    title(['character ', num2str(k), ' bounding box']);
end

% Character Recognition with OCR
results = ocr(BW_clean); % Recognizing Characters Using MATLAB's Built-in OCR Functions
disp('Recognized text:');
disp(results.Text); 

% Displaying images of marked characters
figure;
imshow(I);
hold on;
for k = 1:num
    % Get the bounding box for each character
    [r, c] = find(L == k);
    boundingBox = [min(c), min(r), max(c)-min(c)+1, max(r)-min(r)+1];
    
    % Mark character numbers on the image
    text(boundingBox(1), boundingBox(2)-10, num2str(k), 'Color', 'red', 'FontSize', 12, 'FontWeight', 'bold');
end
title('Marked Characters');
